---
- hosts: "{{target}}"
  user: admin
  become: yes
  become_method: sudo
  tasks:
    - name: include common variables
      include_vars: "maintanence_vars.yml"
    - name: create filter for AS prepend
      blockinfile:
        state: absent
        insertbefore: '# filters end'
        dest: "/etc/bird.conf"
        block: |
          filter bgp_out {
          bgp_path.prepend({{node[ansible_hostname].BGP.asn}});
          bgp_path.prepend({{node[ansible_hostname].BGP.asn}});
          bgp_path.prepend({{node[ansible_hostname].BGP.asn}});
          }
    - name: set BGP export with AS prepend filters
      replace:
        dest: "/etc/bird.conf"
        regexp: "{{item.regexp}}"
        replace: "{{item.replace}}"
        backup: yes
      with_items:
        - regexp: 'export filter bgp_out; # to_spines'
          replace: 'export all; # to_spines'
        - regexp: 'cost \d+; # to_servers'
          replace: 'cost 1000; # to_servers'
      notify: reload bird
  handlers:
    - name: reload bird
      service: name=bird state=reloaded

- hosts: spines
  user: admin
  become: yes
  become_method: sudo
  tasks:
    - name: include common variables
      include_vars: "maintanence_vars.yml"
    - pause: seconds=3
    - debug: msg="ip route show {{test_prefix_fabric}} | egrep via {{node[target].interfaces.swp13.ipv4_addresses[0]|ipaddr('address')}}|via {{node[target].interfaces.swp14.ipv4_addresses[0]|ipaddr('address')}}"
    - name: check if traffic returned to the target for Fabric
      shell: "ip route show {{test_prefix_fabric}} | egrep 'via {{node[target].interfaces.swp13.ipv4_addresses[0]|ipaddr('address')}}|via {{node[target].interfaces.swp14.ipv4_addresses[0]|ipaddr('address')}}'"
      register: prefix_paths_via_target
      failed_when: "prefix_paths_via_target.rc == 2"
      changed_when: "prefix_paths_via_target.stdout != ''"
    - debug: msg="Paths for {{test_prefix_fabric}} available via {{target}} - {{prefix_paths_via_target.stdout_lines}}"
    - name: check if there are some paths available via {{target}}
      assert: { that: "prefix_paths_via_target.stdout != ''"}

- hosts: servers_centos
  user: admin
  become: yes
  become_method: sudo
  tasks:
    - name: include common variables
      include_vars: "maintanence_vars.yml"
    - pause: seconds=3
    - debug: msg="ip route show {{test_prefix_servers}} | egrep via {{node[target].interfaces.swp1s0.ipv4_addresses[0]|ipaddr('address')}}"
    - name: check if traffic returned to the target for Servers
      shell: "ip route show {{test_prefix_servers}} | egrep 'via {{node[target].interfaces.swp1s0.ipv4_addresses[0]|ipaddr('address')}}'"
      register: prefix_paths_via_target
      failed_when: "prefix_paths_via_target.rc == 2"
      changed_when: "prefix_paths_via_target.stdout != ''"
    - debug: msg="Paths for {{test_prefix_servers}} available via {{target}} - {{prefix_paths_via_target.stdout_lines}}"
